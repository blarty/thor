/*
   Copyright 2006 thor.jini.org Project

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

*/

/*
 * PropertiesAddDialog.java
 * 
 * Created on 23 January 2002, 15:03
 */

package org.jini.projects.thor.service.ui;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;

import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;

/**
 * @author calum
 */
public class PropertiesAddDialog extends javax.swing.JDialog {
	private Properties props = new Properties();
	private DefaultListModel listmod = new DefaultListModel();
	// Variables declaration - do not modify
	private javax.swing.JTextField jTextField2;
	private javax.swing.JTextField jTextField1;
	private javax.swing.JButton openFileButton;
	private javax.swing.JButton deleteButton;
	private javax.swing.JButton addButton;
	private javax.swing.JButton cancelButton;
	private javax.swing.JButton okayButton;
	private javax.swing.JFileChooser jFileChooser1;
	private javax.swing.JList propertyList;
	private javax.swing.JLabel fileLabel;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JLabel valueLabel;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel1;

	/**
	 * Creates new form PropertiesAddDialog
	 * 
	 * @param parent
	 *                   Description of Parameter
	 * @param modal
	 *                   Description of Parameter
	 * @since
	 */
	public PropertiesAddDialog(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
	}

	/**
	 * @param args
	 *                   the command line arguments
	 * @since
	 */
	public static void main(String args[]) {
		new PropertiesAddDialog(new javax.swing.JFrame(), true).setVisible(true);
	}

	// End of variables declaration
	/**
	 * Gets the properties attribute of the PropertiesAddDialog object
	 * 
	 * @return The properties value
	 * @since
	 */
	public java.util.Properties getProperties() {
		return this.props;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 * 
	 * @since
	 */
	private void initComponents() {
		//GEN-BEGIN:initComponents
		java.awt.GridBagConstraints gridBagConstraints;
		jFileChooser1 = new javax.swing.JFileChooser();
		jPanel1 = new javax.swing.JPanel();
		okayButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();
		jPanel2 = new javax.swing.JPanel();
		jScrollPane1 = new javax.swing.JScrollPane();
		propertyList = new javax.swing.JList();
		jPanel3 = new javax.swing.JPanel();
		addButton = new javax.swing.JButton();
		deleteButton = new javax.swing.JButton();
		jTextField1 = new javax.swing.JTextField();
		valueLabel = new javax.swing.JLabel();
		fileLabel = new javax.swing.JLabel();
		jTextField2 = new javax.swing.JTextField();
		openFileButton = new javax.swing.JButton();
		getContentPane().setLayout(new java.awt.GridBagLayout());
		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent evt) {
				closeDialog(evt);
			}
		});
	
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 5;
		gridBagConstraints.gridwidth = 4;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 12);
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		getContentPane().add(jPanel1, gridBagConstraints);
		jPanel2.setLayout(new java.awt.BorderLayout());
		propertyList.setModel(listmod);
		propertyList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
			public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
				propListValueChanged(evt);
			}
		});
        propertyList.setFont(new Font("Dialog", 0, 11));
		jScrollPane1.setViewportView(propertyList);
		jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);
		//GradientLabel for Title
		GradientLabel label = new GradientLabel(" Add Properties");
		label.setBackgroundTo(new Color(211, 211, 255));
		label.setIcon(new ImageIcon(getClass().getResource("images/properties.gif")));
		label.setIconTextGap(24);
		label.setFont(new Font("Dialog", Font.BOLD, 18));
		label.setBackground(Color.WHITE);
		label.setHorizontalTextPosition(SwingConstants.LEFT);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.ipady = 0;
		gridBagConstraints.gridwidth = 4;
		gridBagConstraints.gridheight = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 0);
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		getContentPane().add(label, gridBagConstraints);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.gridwidth = 3;
		gridBagConstraints.gridheight = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.insets = new java.awt.Insets(12, 12, 12, 12);
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		getContentPane().add(jPanel2, gridBagConstraints);
		jPanel3.setLayout(new java.awt.GridBagLayout());
		addButton.setMnemonic('A');
		addButton.setFont(new java.awt.Font("Dialog", 0, 12));
		addButton.setText("Add");
		addButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addActionPerformed(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		jPanel3.add(addButton, gridBagConstraints);
		deleteButton.setMnemonic('D');
		deleteButton.setFont(new java.awt.Font("Dialog", 0, 12));
		deleteButton.setText("Delete");
		deleteButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				deleteActionPerformed(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
		jPanel3.add(deleteButton, gridBagConstraints);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 12);
		getContentPane().add(jPanel3, gridBagConstraints);
		jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyTyped(java.awt.event.KeyEvent evt) {
				jTextField1KeyTyped(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(0, 6, 6, 6);
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
		gridBagConstraints.weightx = 1.0;
		getContentPane().add(jTextField1, gridBagConstraints);
		valueLabel.setText("Value:");
		valueLabel.setFont(new java.awt.Font("Dialog", 0, 12));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
		getContentPane().add(valueLabel, gridBagConstraints);
		fileLabel.setText("File:");
		fileLabel.setFont(new java.awt.Font("Dialog", 0, 12));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.insets = new java.awt.Insets(0, 12, 6, 0);
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
		getContentPane().add(fileLabel, gridBagConstraints);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(0, 6, 6, 6);
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
		gridBagConstraints.weightx = 1.0;
		getContentPane().add(jTextField2, gridBagConstraints);
		openFileButton.setFont(new java.awt.Font("Dialog", 0, 12));
		//openFileButton.setIcon(new ImageIcon(getClass().getResource("images/file.gif")));
		
		openFileButton.setText("Import File");
		openFileButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				openFileButtonActionPerformed(evt);
			}
		});
	
		jPanel1.add(openFileButton);
		okayButton.setMnemonic('O');
		okayButton.setFont(new java.awt.Font("Dialog", 0, 12));
		okayButton.setText("Okay");
		okayButton.setSelected(true);
		okayButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				closeDialog(null);
			}
		});
		jPanel1.add(okayButton);
		cancelButton.setMnemonic('C');
		cancelButton.setFont(new java.awt.Font("Dialog", 0, 12));
		cancelButton.setText("Cancel");
		cancelButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				props = null;
				closeDialog(null);
			}
		});
		jPanel1.add(cancelButton);
		pack();
	}

	//GEN-END:initComponents
	/**
	 * Description of the Method
	 * 
	 * @param evt
	 *                   Description of Parameter
	 * @since
	 */
	private void openFileButtonActionPerformed(java.awt.event.ActionEvent evt) {
		//GEN-FIRST:event_jButton5ActionPerformed
		// Add your handling code here:
        jFileChooser1.setFont(new Font("Dialog", 0, 12));
		int consent = jFileChooser1.showOpenDialog(null);
		switch (consent) {
			case JFileChooser.APPROVE_OPTION :
				File selectedFile = jFileChooser1.getSelectedFile();
				if (!selectedFile.isDirectory()) {
					Properties tempprops = new Properties();
					try {
						tempprops.load(new java.io.FileInputStream(selectedFile));
					} catch (java.io.IOException ioex) {
						System.out.println("Cannot Load file: " + selectedFile.getName());
					}
					Iterator iter = tempprops.entrySet().iterator();
					while (iter.hasNext()) {
						Map.Entry entry = (Map.Entry) iter.next();
						props.put(entry.getKey(), entry.getValue());
						listmod.addElement(entry.getKey());
					}
				}
				break;
			default :
				break;
		}
	}

	//GEN-LAST:event_jButton5ActionPerformed
	/**
	 * Description of the Method
	 * 
	 * @param evt
	 *                   Description of Parameter
	 * @since
	 */
	private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {
		//GEN-FIRST:event_jTextField1KeyTyped
		// TODO: Required for modification of properties
		if (evt.getKeyCode() == evt.VK_ENTER) {
			JOptionPane.showMessageDialog(null, "Enter was pressed!");
		}
	}

	//GEN-LAST:event_jTextField1KeyTyped
	/**
	 * Description of the Method
	 * 
	 * @param evt
	 *                   Description of Parameter
	 * @since
	 */
	private void propListValueChanged(javax.swing.event.ListSelectionEvent evt) {
		//GEN-FIRST:event_jList1ValueChanged
		// Add your handling code here:
        if(propertyList.getSelectedValue()!=null)
		jTextField1.setText((String) props.get((String) propertyList.getSelectedValue()));
        else
            jTextField1.setText("");
	}

	//GEN-LAST:event_jList1ValueChanged
	/**
	 * Description of the Method
	 * 
	 * @param evt
	 *                   Description of Parameter
	 * @since
	 */
	private void deleteActionPerformed(java.awt.event.ActionEvent evt) {
		//GEN-FIRST:event_jButton4ActionPerformed
		// Add your handling code here:
		String item = (String) propertyList.getSelectedValue();
		props.remove(item);
        listmod.removeElement(item);
        System.out.println(props);
	}

	//GEN-LAST:event_jButton4ActionPerformed
	/**
	 * Description of the Method
	 * 
	 * @param evt
	 *                   Description of Parameter
	 * @since
	 */
	private void addActionPerformed(java.awt.event.ActionEvent evt) {
		//GEN-FIRST:event_jButton3ActionPerformed
		// Add your handling code here:
		String name = javax.swing.JOptionPane.showInputDialog("Enter name of property");
		String value = javax.swing.JOptionPane.showInputDialog("Enter value of property");
		if (name != null && value != null) {
			props.put(name, value);
			listmod.addElement(name);
		}
	}

	//GEN-LAST:event_jButton3ActionPerformed
	/**
	 * Closes the dialog
	 * 
	 * @param evt
	 *                   Description of Parameter
	 * @since
	 */
	private void closeDialog(java.awt.event.WindowEvent evt) {
		setVisible(false);
		dispose();
	}
}
