import net.jini.lookup.entry.*;
import net.jini.core.entry.*;
import org.jini.projects.thor.service.ui.*;
import org.jini.projects.thor.service.ThorServiceType;

import com.sun.jini.config.KeyStores;

import java.util.Collections;
import net.jini.jeri.ssl.*;
import net.jini.core.constraint.*;
import net.jini.constraint.*;
import java.security.Permission;
import javax.security.auth.login.LoginContext;
import org.jini.projects.thor.service.ServerPermission;
import net.jini.jeri.*;
import com.sun.security.auth.callback.DialogCallbackHandler;

org.jini.projects.thor{

	name="master";
	groups=new String[]{"dev.jini2"};
	
	policy="config/server.policy";
	
	    /* JAAS login */
    loginContext =
	new LoginContext("org.jini.projects.thor",
			 /* Use this for command line version */
			 /* new TextCallbackHandler(); */

			 /* Use a dialog box */
			 new DialogCallbackHandler());

    /* Keystore for getting principals */
    private static users= 
	KeyStores.getKeyStore("file:/home/calum/truststore.trust", null);

    private static clientUser = Collections.singleton(
	KeyStores.getX500Principal("calum", users));

    private static serverUser = Collections.singleton(
	KeyStores.getX500Principal("thor", users));

    /* Preparer for server proxy */
    static proxyPreparer =
	new BasicProxyPreparer(
	    /* Verify the proxy. */
	    true,
	    /*
	     * Require integrity, client authentication, and server
	     * authenticate with the correct principal for all methods.
	     */
	    new BasicMethodConstraints(
		new InvocationConstraints(
		    new InvocationConstraint[] {
			Integrity.YES,
			ClientAuthentication.YES,
			ServerAuthentication.YES,
			new ServerMinPrincipal(serverUser) },
		    null)),
	    new Permission[] {
		/* Authenticate as client when connecting to server */
		new AuthenticationPermission(clientUser,
					     serverUser,
					     "connect") });

}